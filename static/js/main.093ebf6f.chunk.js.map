{"version":3,"sources":["components/Navbar.js","components/Jumbotron.js","components/Images.js","components/Footer.js","components/shuffle.js","App.js","index.js"],"names":["Navbar","props","className","currentScore","topScore","Jumbotron","finPics","map","pic","key","name","src","source","alt","onClick","gameLoop","Footer","href","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","chosenArray","App","state","event","preventDefault","chosen","target","getAttribute","includes","setState","push","this","Images","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+LAYeA,MAVf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,+CACX,0BAAMA,UAAU,wBAAhB,eACA,0BAAMA,UAAU,wBAAhB,4BACA,0BAAMA,UAAU,wBAAhB,UAA+CD,EAAME,aAArD,iBAAiFF,EAAMG,YCMpFC,MAXf,WACI,OACI,yBAAKH,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,iBACA,uBAAGA,UAAU,QAAb,gFCUDF,MAff,SAAgBC,GACZ,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,OAEVD,EAAMK,QAAQC,KAAI,SAAAC,GAAG,OAClB,yBAAKN,UAAU,+BAA+BO,IAAKD,EAAIE,MACnD,yBAAKC,IAAKH,EAAII,OAAQV,UAAU,iBAAiBW,IAAKL,EAAIE,KAAMI,QAASb,EAAMc,kBCGxFC,MAVf,WACI,OACI,4BAAQd,UAAU,6CACd,yBAAKA,UAAU,qCAAf,eACI,uBAAGA,UAAU,cAAce,KAAK,+CAAhC,kB,OCcDC,EAnBD,SAAAC,GAIV,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,GCFPQ,EAAc,GAyDHC,E,2MArDbC,MAAQ,CACJ1B,aAAc,EACdG,UACAF,SAAU,G,EAIdW,SAAW,SAACe,GACVA,EAAMC,iBAEN,IAAIC,EAASF,EAAMG,OAAOC,aAAa,OAGnCP,EAAYQ,SAASH,IAEvB,EAAKI,SAAS,CAAEjC,aAAc,IAE9BwB,EAAa,KAGb,EAAKS,SAAS,CAAEjC,aAAc,EAAK0B,MAAM1B,aAAe,IAEpD,EAAK0B,MAAM1B,cAAgB,EAAK0B,MAAMzB,UACtC,EAAKgC,SAAS,CAAEhC,SAAU,EAAKyB,MAAMzB,SAAW,IAGpDuB,EAAYU,KAAKL,IAInB,EAAKI,SAAS,CAAE9B,QAASY,EAAQ,EAAKW,MAAMvB,Y,wEAI5C,OACE,6BACE,kBAAC,EAAD,CAEEH,aAAgBmC,KAAKT,MAAM1B,aAC3BC,SAAYkC,KAAKT,MAAMzB,WAEzB,kBAAC,EAAD,MACA,kBAACmC,EAAD,CAEEjC,QAAWgC,KAAKT,MAAMvB,QACtBS,SAAYuB,KAAKvB,WAEnB,kBAAC,EAAD,W,GAjDUyB,IAAMC,WCbxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.093ebf6f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar navbar-dark fixed-top justify-center\">\n            <span className=\"navbar-brand mb-0 h1\">Clicky Game</span>\n            <span className=\"navbar-brand mb-0 h1\">Click an Image to Begin!</span>\n            <span className=\"navbar-brand mb-0 h1\">Score: {props.currentScore} | Top Score: {props.topScore}</span>\n        </nav>\n    );\n};\n\nexport default Navbar;","import React from \"react\";\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Meet Mr. Fin!</h1>\n                <p className=\"lead\">Click on a picture to earn points, but don't click on any more than once!</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Jumbotron;","import React from \"react\";\n\nfunction Navbar(props) {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                {/* Maps the canidates array to html */}\n                {props.finPics.map(pic => (\n                    <div className=\"col-lg-3 col-md-4 col-6 zoom\" key={pic.name}>\n                        <img src={pic.source} className=\"img-fluid  p-1\" alt={pic.name} onClick={props.gameLoop}></img>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Navbar;","import React from \"react\";\n\nfunction Footer() {\n    return (\n        <footer className=\"page-footer font-small text-light bg-dark\">\n            <div className=\"footer-copyright text-center py-3\">Github Repo:\n                <a className=\"text-danger\" href=\"https://github.com/jeff-swanner/clicky-game\"> Click Here</a>\n            </div>\n        </footer>\n    );\n};\n\nexport default Footer;\n","// Function used to shuffle array order\nvar shuffle = array => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n}\n\nexport default shuffle;","import React from \"react\";\n\n// Imports neccesary react components\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Images from \"./components/Images\";\nimport Footer from \"./components/Footer\";\n\n// Imports finPics JSON file with references to image files\nimport finPics from \"./components/finPics.json\";\n\n// Imports function used to shuffle array order\nimport shuffle from \"./components/shuffle\";\n\n// Empty array used to store the already chosen array items\nvar chosenArray = [];\n\nclass App extends React.Component {\n  // Adding the score variables and finPics array to the state\n  state = {\n      currentScore: 0,\n      finPics,\n      topScore: 0\n  };\n\n  // gameLoop handles onclick events for images\n  gameLoop = (event) => {\n    event.preventDefault();\n    // Grabs the unique alt tag of the image clicked on\n    let chosen = event.target.getAttribute('alt');\n\n    // Checks if image has been saved in chosenArray\n    if (chosenArray.includes(chosen)){\n      // Resets score to 0 if already saved in chosenArray\n      this.setState({ currentScore: 0 });\n      // Empties chosen array to reset game\n      chosenArray =[];\n    } else {\n      // If not in chosenArray increments currentScore by 1\n      this.setState({ currentScore: this.state.currentScore + 1 });\n      // Checks the topScore and updates if currentScore is higher than top score\n      if (this.state.currentScore >= this.state.topScore) {\n          this.setState({ topScore: this.state.topScore + 1 });\n      };\n      // Pushes the selected array item to chosenArray\n      chosenArray.push(chosen);\n    };\n\n    // Shuffles the finPics array\n    this.setState({ finPics: shuffle(this.state.finPics)});        \n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          // sends current score and top score to Navbar as props\n          currentScore = {this.state.currentScore}\n          topScore = {this.state.topScore}\n        />\n        <Jumbotron />\n        <Images \n          // Sends finPics array and gameloop function to images as props\n          finPics = {this.state.finPics}\n          gameLoop = {this.gameLoop}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}